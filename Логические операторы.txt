and: если все операнды являются истинными (ненулевые или непустые), то возвращается последнее истинное значение.
print( 1 and "hello" and [False])
# [False]
Несмотря на то, что последний операнд похож на False, он является непустым списком, а значит, он истинный.

and: если один из операндов является ложным, то возвращается первый такой операнд.
print(42 and 0 and '' and False)
# 0
Первый операнд является ненулевым числом — значит, истинный, а все остальные — ноль, пустая строка, булево значение False — ложные. И согласно правилу возвращается первый ложный операнд (слева направо).

or: если один из операндов является истинным, то возвращается первый такой операнд, а остальные игнорируются.
print([] or 3.14 or False)
# 3.14
Первый операнд (пустой список) является ложным, следующий  (ненулевое число) — истинным, а значит, возвращается именно он, а все остальные игнорируются (не вычисляются).

or: если все операнды являются ложными, то возвращается последний.
print(0 or '' or False)
# False
--------------
 all([ ]), возвращает True, если все условия, переданные в аргумент функции в виде списка, являются истинными.

if all([type(a) == int,
        100 <= a <= 999,
        a % 2 == 0,
        a % 3 == 0]):
    print("Число удовлетворяет условиям")

А что, если нужно, чтобы был хотя бы один истинный? Тогда на помощь приходит функция any([ ]).