# Список — это также упорядоченный набор элементов. Однако, в отличие от массива, который хранится последовательно в одной
#  области памяти, и каждой ячейке линейно соответствует определённый индекс, список может быть хаотично распределён в
#   памяти. Порядок в этой структуре данных задаётся наличием указателей на следующий (и/или предыдущий) элемент в списке.
# -----------
# Cтек — это структура данных, реализующая LIFO.Last In First Out
# ----------------
# Очередь = FIFO — First In First Out (первый вошёл — первый вышел). Прямо как в любимой
# всеми очереди к врачу, например.
# ------

# Создадим класс Queue — нужная нам очередь
# Добавьте в класс Queue метод is_empty, который проверяет наличие элементов в очереди, используя указатели head и tail.
# Запрещается использование функции len(list_), так как ее сложность O(n).
# ---
# Добавьте в класс Queue метод size, который возвращает текущий размер очереди. Учтите, что необходимо рассмотреть
# несколько случаев: когда очередь пустая, когда очередь полная (какому условию соответствует?), а также отдельное
# внимание стоит обратить на тот случай, когда хвост очереди переместился в начало списка (закольцевался).
# ------------
# Добавьте в класс Queue метод add, который добавляет задачу в конец очереди. Также учтите, что размер массива ограничен
# и при достижении этого предела, необходимо перенести указатель в положение 0. После добавления задачи в очередь,
# она должна вывести уведомление об этом в формате:
# "Задача №1 добавлена"
# -----------
# Добавьте в класс Queue метод show, печатающий информацию о приоритетной задаче в формате#
# "Задача №1 в приоритете"
# ----------------
# Добавьте в класс Queue метод do, которая печатает в консоль задачу (=выполняет ее) и, соответственно, удаляет ее из
# очереди, присваивая ей значение 0. Формат вывода:#
# "Задача №1 выполнена"

class Queue:
    # Конструктор нашего класса, в нём происходит нужная инициализация объекта
    def __init__(self, max_size):
        self.max_size = max_size  # размер очереди
        self.task_num = 0  # будем хранить сквозной номер задачи

        self.tasks = [0 for _ in range(self.max_size)]  # инициализируем список с нулевыми элементами
        self.head = 0  # указатель на начало очереди
        self.tail = 0  # указатель на элемент следующий за концом очереди

    def is_empty(self):
        return self.head == self.tail and self.tasks[self.head] == 0

    def size(self):  # получаем размер очереди
        if self.is_empty():  # если она пуста
            return 0  # возвращаем ноль
        elif self.head == self.tail:  # иначе, если очередь не пуста, но указатели совпадают
            return self.max_size  # значит очередь заполнена
        elif self.head > self.tail:  # если хвост очереди сместился в начало списка
            return self.max_size - self.head + self.tail
        else:  # или если хвост стоит правее начала
            return self.tail - self.head

    def add(self):
        self.task_num += 1  # увеличиваем порядковый номер задачи
        self.tasks[self.tail] = self.task_num  # добавляем его в очередь
        print(f"Задача №{self.tasks[self.tail]} добавлена")
        # увеличиваем указатель на 1 по модулю максимального числа элементов
        # для зацикливания очереди в списке
        self.tail = (self.tail + 1) % self.max_size
    def show(self):
        print(f"Задача №{self.tasks[self.head]} в приоритете")



        def do(self):  # выполняем приоритетную задачу
            print(f"Задача №{self.tasks[self.head]} выполнена")
            # после выполнения зануляем элемент по указателю
            self.tasks[self.head] = 0
            # и циклично перемещаем указатель
            self.head = (self.head + 1) % self.max_size



    # !!! Класс далее нужно дополнить методами !!!


# Используем класс
size = int(input("Определите размер очереди: "))
q = Queue(size)

while True:
    cmd = input("Введите команду:")
    if cmd == "empty":
        if q.is_empty():
            print("Очередь пустая")
        else:
            print("В очереди есть задачи")
    elif cmd == "size":
        print("Количество задач в очереди:", q.size())
    elif cmd == "add":
        if q.size() != q.max_size:
            q.add()
        else:
            print("Очередь переполнена")
    elif cmd == "show":
        if q.is_empty():
            print("Очередь пустая")
        else:
            q.show()
    elif cmd == "do":
        if q.is_empty():
            print("Очередь пустая")
        else:
            q.do()
    elif cmd == "exit":
        for _ in range(q.size()):
            q.do()
        print("Очередь пустая. Завершение работы")
        break
    else:
        print("Введена неверная команда")
